using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.AspNetCore.WebUtilities;
using Backend.Services;
using Xunit;
using SafeRide.src.Models;
using SafeRide.src.Services;
using Newtonsoft.Json;
using System;
using SafeRide.src.DataAccess;

namespace SRUnitTests
{
	public class ExcludeHazardUnitTests
	{

		// two random step coordinates taken from the route response used in this UnitTest
		// the actual actual distance between them is 10.820 miles (17413.807 meters)
		// calculated using "https://www.cqsrg.org/tools/GCDistance/"
		[Theory]
		[InlineData(37.77904292167199, -121.5519422062582, 37.711694879433495, -121.39962701098186, 17413.807, false)] // test if the target coord is within a 10 mile radius of the center 
		[InlineData(37.77904292167199, -121.5519422062582, 37.711694879433495, -121.39962701098186, 24140.2, true)] // test if the target coord is within a 15 mile radius of the center 
		public void IsInsideRadius(double centerX, double centerY, double targetX, double targetY, double radius, bool expected)
		{
			ExcludeHazardService excludeService = new ExcludeHazardService();
			var actual = excludeService.IsInside(centerX, centerY, targetX, targetY, radius);

			Assert.True(actual);
		}


		[Fact]
		public async Task FindSearchCoordinates()
		{
			HttpClient client = new HttpClient();
			HttpResponseMessage response = await client.GetAsync("https://api.mapbox.com/directions/v5/mapbox/driving/-73.99045550189928%2C40.73225479503364%3B-73.97962084116241%2C40.73551564560131%3B-73.9886679569091%2C40.72716860725768?alternatives=true&geometries=geojson&language=en&overview=simplified&steps=true&access_token=pk.eyJ1IjoiY29saW5jcmVhc21hbiIsImEiOiJjbDIxbGhnZ2QxMW1pM2Jwamp4YW42M25zIn0.WJD2zPxATbnf2utML0OOCQ");

			response.EnsureSuccessStatusCode();
			string jsonResponse = await response.Content.ReadAsStringAsync();

			ParseResponseService? ParseResponseService = new ParseResponseService(jsonResponse);

			var route = ParseResponseService.GetDirectionsResponse().Routes[0];

			ExcludeHazardService? excludeHazardService = new ExcludeHazardService(route);

			// all points of the route generated by the hard coded request URL  are within a single search radius
			// in this case, FindSearchCoordinates should only return two search coordinates - the starting and ending coordinates of the route
			var expected = new Dictionary<double, double>()
			{
				[-73.990147] = 40.732215,
				[-73.979546] = 40.735483
			};
			var actual = excludeHazardService.FindSearchCoordinates();

			Assert.Equal(expected, actual);
		}

		[Theory]
		[InlineData(new double[] { -74.002917, 40.73992 }, 0, 5, 5)] // querying the test data for hazard type of 0 around the given coordinate should return a total 5 hazard coordinates
		public void GetByTypeInRadius(double[] searchCoordinate, int hazardType, double searchRadiusInMiles, int expected)
		{
			HazardDAO hazardDAO = new HazardDAO();
			Dictionary<double, double> results = hazardDAO.GetByTypeInRadius(hazardType, searchCoordinate[0], searchCoordinate[1], searchRadiusInMiles);
			Assert.Equal(results.Count, expected); 
		}
	}
}





